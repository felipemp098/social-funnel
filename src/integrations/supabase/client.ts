// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uxkcwvzfdmxzmzeymchm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV4a2N3dnpmZG14em16ZXltY2htIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgzMTQ5MjUsImV4cCI6MjA3Mzg5MDkyNX0.rBQNmcWfSgEd9-SOVZEw78APJBz-Qzlj4hGYCh0E3dI";

// Service Role Key via vari√°vel de ambiente (SEGURO)
const SUPABASE_SERVICE_ROLE_KEY = import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

// Debug: Verificar se a chave foi carregada
console.log('üîë Service Role Key carregada:', SUPABASE_SERVICE_ROLE_KEY ? 'SIM' : 'N√ÉO');
console.log('üîë Primeiros caracteres:', SUPABASE_SERVICE_ROLE_KEY?.substring(0, 20) + '...');

// Cliente principal (para usu√°rios)
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Singleton para cliente admin para evitar m√∫ltiplas inst√¢ncias
let _supabaseAdmin: ReturnType<typeof createClient<Database>> | null = null;

function getSupabaseAdmin() {
  if (!_supabaseAdmin) {
    console.log('üèóÔ∏è Criando nova inst√¢ncia do Supabase Admin');
    _supabaseAdmin = createClient<Database>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
      auth: {
        persistSession: false,
        autoRefreshToken: false,
        storage: undefined, // N√£o usar storage para evitar conflitos
      },
      global: {
        headers: {
          'X-Client-Info': 'social-funnel-admin'
        }
      }
    });
  } else {
    console.log('‚ôªÔ∏è Reutilizando inst√¢ncia existente do Supabase Admin');
  }
  return _supabaseAdmin;
}

// Exportar a fun√ß√£o em vez da inst√¢ncia para evitar cria√ß√£o imediata
export { getSupabaseAdmin as supabaseAdmin };

// Debug: Verificar se os clientes foram criados corretamente
console.log('üîß Supabase client criado:', !!supabase);

// =============================================================================
// FUN√á√ïES DE API PARA DASHBOARD
// =============================================================================

export interface DashboardFilters {
  startDate?: string;
  endDate?: string;
  segment?: string;
  temperature?: string;
  source?: string;
}

export interface DashboardMetrics {
  prospeccoesDoDia: number;
  totalPeriodo: number;
  inbound: {
    total: number;
    respostas: number;
    reunioesAgendadas: number;
    reunioesRealizadas: number;
    noShow: number;
    followUp: number;
    vendas: number;
    faturamento: number;
    taxaNoShow: number;
    taxaConversao: number;
  };
  outbound: {
    total: number;
    respostas: number;
    reunioesAgendadas: number;
    reunioesRealizadas: number;
    noShow: number;
    followUp: number;
    vendas: number;
    faturamento: number;
    taxaNoShow: number;
    taxaConversao: number;
  };
  taxaInbound: number;
  taxaOutbound: number;
  porTemperatura: Record<string, number>;
  porSegmento: Array<{
    segmento: string;
    total: number;
    vendas: number;
    faturamento: number;
  }>;
}

export interface ProspectDrilldown {
  id: number;
  contact_name: string;
  company: string | null;
  segment: string | null;
  temperature: string | null;
  source: string | null;
  status: string;
  deal_value: number | null;
  closer: string | null;
  date_prospect: string;
  last_contact_date: string | null;
}

export interface DashboardDailyMetrics {
  labels: string[];
  datasets: {
    prospeccoes: number[];
    respostas: number[];
    agendamentos: number[];
    reunioes_realizadas: number[];
    vendas: number[];
    faturamento: number[];
    inbound: number[];
    outbound: number[];
  };
  summary: {
    total_prospeccoes: number;
    total_respostas: number;
    total_agendamentos: number;
    total_reunioes: number;
    total_vendas: number;
    total_faturamento: number;
    taxa_resposta: number;
    taxa_agendamento: number;
    taxa_conversao: number;
  };
}

/**
 * Busca m√©tricas agregadas do dashboard
 */
export async function getDashboardMetrics(filters: DashboardFilters = {}): Promise<DashboardMetrics> {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    throw new Error('Usu√°rio n√£o autenticado');
  }

  // Definir per√≠odo padr√£o (√∫ltimo m√™s)
  const endDate = filters.endDate || new Date().toISOString().split('T')[0];
  const startDate = filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

  const { data, error } = await supabase.rpc('get_dashboard_metrics', {
    user_id: user.id,
    start_date: startDate,
    end_date: endDate,
    filter_segment: filters.segment || null,
    filter_temperature: filters.temperature || null,
    filter_source: filters.source || null,
  });

  if (error) {
    console.error('Erro ao buscar m√©tricas do dashboard:', error);
    throw new Error(`Erro ao carregar m√©tricas: ${error.message}`);
  }

  return data as DashboardMetrics;
}

/**
 * Busca lista detalhada de prospects para drill-down
 */
export async function getDashboardDrilldown(
  metric: string,
  filters: DashboardFilters = {}
): Promise<ProspectDrilldown[]> {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    throw new Error('Usu√°rio n√£o autenticado');
  }

  // Definir per√≠odo padr√£o (√∫ltimo m√™s)
  const endDate = filters.endDate || new Date().toISOString().split('T')[0];
  const startDate = filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

  const { data, error } = await supabase.rpc('get_dashboard_drilldown', {
    user_id: user.id,
    metric_name: metric,
    start_date: startDate,
    end_date: endDate,
    filter_segment: filters.segment || null,
    filter_temperature: filters.temperature || null,
    filter_source: filters.source || null,
  });

  if (error) {
    console.error('Erro ao buscar drill-down do dashboard:', error);
    throw new Error(`Erro ao carregar dados detalhados: ${error.message}`);
  }

  return (data || []) as ProspectDrilldown[];
}

/**
 * Busca m√©tricas di√°rias para gr√°ficos de linha temporal
 */
export async function getDashboardDailyMetrics(filters: DashboardFilters = {}): Promise<DashboardDailyMetrics> {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    throw new Error('Usu√°rio n√£o autenticado');
  }

  // Definir per√≠odo padr√£o (√∫ltimo m√™s)
  const endDate = filters.endDate || new Date().toISOString().split('T')[0];
  const startDate = filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

  const { data, error } = await supabase.rpc('get_dashboard_daily_metrics', {
    user_id: user.id,
    start_date: startDate,
    end_date: endDate,
    filter_segment: filters.segment || null,
    filter_temperature: filters.temperature || null,
    filter_source: filters.source || null,
  });

  if (error) {
    console.error('Erro ao buscar m√©tricas di√°rias do dashboard:', error);
    throw new Error(`Erro ao carregar m√©tricas di√°rias: ${error.message}`);
  }

  return data as DashboardDailyMetrics;
}