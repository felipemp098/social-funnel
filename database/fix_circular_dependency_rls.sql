-- =============================================================================
-- CORRE√á√ÉO URGENTE: DEPEND√äNCIA CIRCULAR NAS POL√çTICAS RLS
-- Problema: Pol√≠ticas RLS de app_users dependem da pr√≥pria tabela app_users
-- =============================================================================

-- EXECUTE IMEDIATAMENTE NO SUPABASE DASHBOARD - SQL EDITOR

-- -----------------------------------------------------------------------------
-- 1. REMOVER POL√çTICAS COM DEPEND√äNCIA CIRCULAR
-- -----------------------------------------------------------------------------
DROP POLICY IF EXISTS "app_users_select_policy" ON public.app_users;
DROP POLICY IF EXISTS "app_users_insert_policy" ON public.app_users;
DROP POLICY IF EXISTS "app_users_update_policy" ON public.app_users;
DROP POLICY IF EXISTS "app_users_delete_policy" ON public.app_users;

-- Remover outras pol√≠ticas existentes
DROP POLICY IF EXISTS "app_users_select" ON public.app_users;
DROP POLICY IF EXISTS "app_users_insert_admin" ON public.app_users;
DROP POLICY IF EXISTS "app_users_insert_manager" ON public.app_users;
DROP POLICY IF EXISTS "app_users_update_self" ON public.app_users;
DROP POLICY IF EXISTS "app_users_update_admin" ON public.app_users;
DROP POLICY IF EXISTS "app_users_delete_admin" ON public.app_users;

SELECT 'üóëÔ∏è Pol√≠ticas com depend√™ncia circular removidas' as status;

-- -----------------------------------------------------------------------------
-- 2. CRIAR POL√çTICAS SEM DEPEND√äNCIA CIRCULAR
-- -----------------------------------------------------------------------------

-- Policy 1: SELECT - SEM consultar app_users dentro da policy
CREATE POLICY "app_users_select_simple" 
  ON public.app_users 
  FOR SELECT 
  USING (
    -- Qualquer usu√°rio autenticado pode ver seus pr√≥prios dados
    auth.uid() = id
  );

-- Policy 2: INSERT - Usando fun√ß√£o is_admin que j√° existe
CREATE POLICY "app_users_insert_simple" 
  ON public.app_users 
  FOR INSERT 
  WITH CHECK (
    -- Apenas admins podem criar usu√°rios
    public.is_admin(auth.uid())
  );

-- Policy 3: UPDATE - Usando fun√ß√£o is_admin
CREATE POLICY "app_users_update_simple" 
  ON public.app_users 
  FOR UPDATE 
  USING (
    -- Apenas admins podem atualizar
    public.is_admin(auth.uid())
  )
  WITH CHECK (
    public.is_admin(auth.uid())
  );

-- Policy 4: DELETE - Usando fun√ß√£o is_admin
CREATE POLICY "app_users_delete_simple" 
  ON public.app_users 
  FOR DELETE 
  USING (
    public.is_admin(auth.uid())
  );

SELECT '‚úÖ Pol√≠ticas simples sem depend√™ncia circular criadas' as status;

-- -----------------------------------------------------------------------------
-- 3. VERIFICAR SE A FUN√á√ÉO is_admin N√ÉO TEM DEPEND√äNCIA CIRCULAR
-- -----------------------------------------------------------------------------

-- Verificar o c√≥digo da fun√ß√£o is_admin
SELECT 
  'Verificando fun√ß√£o is_admin...' as status,
  pg_get_functiondef(oid) as definicao
FROM pg_proc 
WHERE proname = 'is_admin' 
  AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
LIMIT 1;

-- -----------------------------------------------------------------------------
-- 4. SE is_admin TIVER PROBLEMA, CRIAR VERS√ÉO ALTERNATIVA
-- -----------------------------------------------------------------------------

-- Fun√ß√£o alternativa que usa apenas auth.uid() sem consultar app_users
CREATE OR REPLACE FUNCTION public.is_admin_safe(uid uuid)
RETURNS boolean 
LANGUAGE sql 
STABLE 
SECURITY DEFINER
AS $$
  -- Lista hardcoded de UUIDs de admins (tempor√°rio)
  SELECT uid IN (
    '446f867b-cd8c-480e-9d68-f1af89a4c8c4'::uuid
    -- Adicione outros UUIDs de admin aqui se necess√°rio
  );
$$;

-- Coment√°rio
COMMENT ON FUNCTION public.is_admin_safe(uuid) IS 'Vers√£o segura sem depend√™ncia circular - lista hardcoded de admins';

-- -----------------------------------------------------------------------------
-- 5. RECRIAR POL√çTICAS COM FUN√á√ÉO SEGURA
-- -----------------------------------------------------------------------------

-- Remover pol√≠ticas anteriores
DROP POLICY IF EXISTS "app_users_insert_simple" ON public.app_users;
DROP POLICY IF EXISTS "app_users_update_simple" ON public.app_users;
DROP POLICY IF EXISTS "app_users_delete_simple" ON public.app_users;

-- Recriar com fun√ß√£o segura
CREATE POLICY "app_users_insert_safe" 
  ON public.app_users 
  FOR INSERT 
  WITH CHECK (public.is_admin_safe(auth.uid()));

CREATE POLICY "app_users_update_safe" 
  ON public.app_users 
  FOR UPDATE 
  USING (public.is_admin_safe(auth.uid()))
  WITH CHECK (public.is_admin_safe(auth.uid()));

CREATE POLICY "app_users_delete_safe" 
  ON public.app_users 
  FOR DELETE 
  USING (public.is_admin_safe(auth.uid()));

SELECT 'üîí Pol√≠ticas seguras com fun√ß√£o hardcoded criadas' as status;

-- -----------------------------------------------------------------------------
-- 6. TESTE FINAL
-- -----------------------------------------------------------------------------

-- Testar acesso
SELECT 
  'üß™ TESTE: Tentando acessar app_users...' as teste,
  id, 
  email, 
  role 
FROM public.app_users 
WHERE id = auth.uid()
LIMIT 1;

-- -----------------------------------------------------------------------------
-- 7. RESULTADO
-- -----------------------------------------------------------------------------
SELECT 
  'üéâ CORRE√á√ÉO DA DEPEND√äNCIA CIRCULAR APLICADA!' as resultado
UNION ALL
SELECT 'üìã PR√ìXIMOS PASSOS:'
UNION ALL
SELECT '1. Atualize a p√°gina da aplica√ß√£o (F5)'
UNION ALL  
SELECT '2. Teste v√°rias vezes (primeira vez, segunda, terceira...)'
UNION ALL
SELECT '3. Verifique se funciona consistentemente'
UNION ALL
SELECT '4. Olhe o console para confirmar que n√£o trava mais';
